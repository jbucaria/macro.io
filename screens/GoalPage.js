// GoalPage.js

import React, { useState } from 'react'
import {
  View,
  Text,
  TextInput,
  Alert,
  Modal,
  TouchableOpacity,
  Button,
  ScrollView,
} from 'react-native'
import { db, auth } from '../firebase' // Adjust the path as necessary
import { doc, setDoc } from 'firebase/firestore' // Import Firestore functions

const GoalPage = () => {
  const [manualCalories, setManualCalories] = useState('')
  const [manualProtein, setManualProtein] = useState('')
  const [manualFat, setManualFat] = useState('')
  const [manualCarbs, setManualCarbs] = useState('')

  const [autoGenerated, setAutoGenerated] = useState(false) // Toggle for auto-generated macros
  const [modalVisible, setModalVisible] = useState(false) // Modal visibility state
  const [step, setStep] = useState(1) // Step for auto-generation flow

  // States for the auto-generation process
  const [currentWeight, setCurrentWeight] = useState('')
  const [goalWeight, setGoalWeight] = useState('')

  const nextStep = () => setStep(step + 1)
  const prevStep = () => setStep(step - 1)

  // Final calculation logic based on desired weight
  const generateMacros = () => {
    const desiredWeight = parseInt(goalWeight)

    if (!desiredWeight) {
      Alert.alert('Error', 'Please provide a valid goal weight.')
      return
    }

    // Convert kg to lbs
    const weightInPounds = desiredWeight * 2.20462

    // Calculate macronutrients
    const calculatedProtein = weightInPounds * 1
    const calculatedCarbs = weightInPounds * 0.7
    const calculatedFat = weightInPounds * 0.8

    // Calculate calories
    const proteinCalories = calculatedProtein * 4
    const carbCalories = calculatedCarbs * 4
    const fatCalories = calculatedFat * 9

    const totalCalories = proteinCalories + carbCalories + fatCalories

    // Log calculations for debugging
    console.log('Generated Macros:', {
      totalCalories: Math.round(totalCalories),
      protein: Math.round(calculatedProtein),
      fat: Math.round(calculatedFat),
      carbs: Math.round(calculatedCarbs),
    })

    // Update state variables
    setManualCalories(Math.round(totalCalories).toString())
    setManualProtein(Math.round(calculatedProtein).toString())
    setManualFat(Math.round(calculatedFat).toString())
    setManualCarbs(Math.round(calculatedCarbs).toString())

    setAutoGenerated(true)
    setModalVisible(false)
    setStep(1)

    // Reset weight inputs
    setCurrentWeight('')
    setGoalWeight('')

    Alert.alert('Success', 'Your goals have been updated.')
  }

  // Save macros to Firestore
  // Save macros to Firestore
  const saveGoals = async () => {
    const currentUser = auth.currentUser
    if (!currentUser) {
      Alert.alert('Error', 'No user is logged in.')
      return
    }

    const userId = currentUser.uid

    try {
      // Reference to the 'nutrition' document in the 'goals' collection
      const nutritionDocRef = doc(db, 'users', userId, 'goals', 'nutrition')

      // Use setDoc without merge to overwrite the existing document
      await setDoc(nutritionDocRef, {
        calories: parseInt(manualCalories),
        protein: parseInt(manualProtein),
        fat: parseInt(manualFat),
        carbohydrates: parseInt(manualCarbs),
      })

      Alert.alert('Success', 'Goals saved successfully!')
    } catch (error) {
      console.error('Error saving goals:', error)
      Alert.alert('Error', 'Failed to save goals.')
    }
  }

  return (
    <View className="flex-1 bg-white p-4">
      <Text className="text-2xl font-bold text-center mb-6">
        Set Your Goals
      </Text>

      {/* Editable Boxes for Manual Input */}
      <View className="mb-4">
        <Text className="text-lg mb-2">Calorie Goal</Text>
        <TextInput
          placeholder="Calories"
          value={manualCalories}
          onChangeText={setManualCalories}
          keyboardType="numeric"
          editable={!autoGenerated}
          className="border border-gray-300 rounded-lg px-4 py-3 text-lg"
        />
      </View>

      <View className="mb-4">
        <Text className="text-lg mb-2">Protein Goal (g)</Text>
        <TextInput
          placeholder="Protein (g)"
          value={manualProtein}
          onChangeText={setManualProtein}
          keyboardType="numeric"
          editable={!autoGenerated}
          className="border border-gray-300 rounded-lg px-4 py-3 text-lg"
        />
      </View>

      <View className="mb-4">
        <Text className="text-lg mb-2">Fat Goal (g)</Text>
        <TextInput
          placeholder="Fat (g)"
          value={manualFat}
          onChangeText={setManualFat}
          keyboardType="numeric"
          editable={!autoGenerated}
          className="border border-gray-300 rounded-lg px-4 py-3 text-lg"
        />
      </View>

      <View className="mb-6">
        <Text className="text-lg mb-2">Carbohydrates Goal (g)</Text>
        <TextInput
          placeholder="Carbohydrates (g)"
          value={manualCarbs}
          onChangeText={setManualCarbs}
          keyboardType="numeric"
          editable={!autoGenerated}
          className="border border-gray-300 rounded-lg px-4 py-3 text-lg"
        />
      </View>

      <Button title="Save Goals" onPress={saveGoals} color="green" />

      <View className="mt-4">
        <Button
          title="Auto Generate Goals"
          onPress={() => setModalVisible(true)}
          color="blue"
          disabled={autoGenerated}
        />
      </View>

      {/* Modal for Auto-Generate Flow */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => {
          setModalVisible(false)
          setStep(1) // Reset steps if modal is closed
        }}
      >
        <View className="flex-1 justify-end bg-black bg-opacity-50">
          <View className="bg-white rounded-t-2xl p-6">
            {/* Close Modal Button */}
            <TouchableOpacity
              className="absolute top-4 right-4"
              onPress={() => {
                setModalVisible(false)
                setStep(1)
              }}
            >
              <Text className="text-xl font-bold">Ã—</Text>
            </TouchableOpacity>

            <ScrollView>
              {/* Steps UI */}
              {step === 1 && (
                <View>
                  <Text className="text-xl font-bold mb-4 text-center">
                    Enter your current weight (kg)
                  </Text>
                  <TextInput
                    placeholder="Current weight"
                    value={currentWeight}
                    onChangeText={setCurrentWeight}
                    keyboardType="numeric"
                    className="border border-gray-300 rounded-lg px-4 py-3 text-lg mb-4"
                  />
                  <View className="flex-row justify-between">
                    <Button
                      title="Next"
                      onPress={nextStep}
                      disabled={!currentWeight}
                      color="blue"
                    />
                  </View>
                </View>
              )}

              {step === 2 && (
                <View>
                  <Text className="text-xl font-bold mb-4 text-center">
                    Enter your desired weight (kg)
                  </Text>
                  <TextInput
                    placeholder="Goal weight"
                    value={goalWeight}
                    onChangeText={setGoalWeight}
                    keyboardType="numeric"
                    className="border border-gray-300 rounded-lg px-4 py-3 text-lg mb-4"
                  />
                  <View className="flex-row justify-between">
                    <Button title="Previous" onPress={prevStep} color="gray" />
                    <Button
                      title="Generate Goals"
                      onPress={generateMacros}
                      disabled={!goalWeight}
                      color="green"
                    />
                  </View>
                </View>
              )}
            </ScrollView>
          </View>
        </View>
      </Modal>
    </View>
  )
}

export default GoalPage
